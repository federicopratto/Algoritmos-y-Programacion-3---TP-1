TestCase subclass: #AlgoChatTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/23/2019 23:48'!test03UsuarioAgregadoACanalNoRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat publicarMensaje: 'clase de hoy suspendida' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/26/2019 15:06'!test02EnviarMensajesACanalGuardaLosMensajes	| algoChat |	algoChat := AlgoChat new.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.	algoChat publicarMensaje: 'tp0 publicado' enCanal: 'anuncios'.	algoChat publicarMensaje: 'fecha limite 30/8' enCanal: 'anuncios'.	algoChat publicarMensaje: 'se entrega por campus' enCanal: 'anuncios'.		self assert: (algoChat mensajesDelCanal: 'anuncios') equals: 'tp0 publicado | fecha limite 30/8 | se entrega por campus'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 3) equals: 'tp0... | fec... | se ...'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 2) equals: 'tp... | fe... | se...'.	self assert: (algoChat mensajesDelCanal: 'consultas') equals: ''.	! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test04UsuarioAgregadoAConversacionRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat crearConversacionConUsuarios: 'juan,maria,jose'.		algoChat publicarMensaje: 'hola' enConversacion: 'juan,maria,jose'.	algoChat publicarMensaje: 'como va' enConversacion: 'juan,maria,jose'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: 'hola | como va'.	self assert: (algoChat getMensajesDeConversacion: 'juan,maria,jose') equals: 'hola | como va'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/23/2019 22:58'!test00AlgoChatVacioNoTieneUsuariosNiCanales	| algoChat |	algoChat := AlgoChat new.	self assert: algoChat getCantidadUsuarios equals: 0.	self assert: algoChat getCantidadCanales equals: 0.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:25'!test08UsuarioPuedeReanudarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat reanudarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.	algoChat publicarMensaje: 'libreta olvidada en la clase' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | libreta olvidada en la clase'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'FedericoPratto 9/15/2019 21:29'!test06UsuarioPuedeElegirPalabrasParaSerNotificado	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'juan' alCanal: 'consultas'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'parcial' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'libreta' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro aprobo el parcial' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro traer libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'consultas'.	algoChat publicarMensaje: 'libreta perdida' enCanal: 'consultas'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @pedro aprobo el parcial | cartuchera olvidada en la clase'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | @pedro traer libreta'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 01:41'!test01UsuarioNuevoRecibeMensajesComoNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'pedro'.		algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.	algoChat enviarMensaje: 'como va' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola juan | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'juan' resumidasALongitud: 4) equals: 'hola... | como...'.	self assert: (algoChat getNotificacionesDeUsuario: 'pedro') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test05UsuarioEnCanalRecibeNotificacionesCuandoMencionanSuNombre	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.	algoChat agregarUsuario: 'jose' alCanal: 'anuncios'.	algoChat publicarMensaje: 'por favor @maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: 'hoy no hace falta que venga @pedro a clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer la libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan como estas?' enCanal: 'consultas'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'por favor @maria y @juan venir a clase hoy | @juan traer la libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'por favor @maria y @juan venir a clase hoy'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test07UsuarioPuedePausarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'clase' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer libreta' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @juan traer libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | cartuchera olvidada en la clase'.! !TestCase subclass: #CanalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:13'!test09SeMencionaAUnUsuarioSilenciado		| usuario canal |		usuario := Usuario nuevoConNombre: 'Fede'.	canal := Canal nuevoConNombre: 'canalDePrueba'.	canal agregarUsuario: usuario.	canal silenciarUsuario: 'Fede'.		canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola mundo').	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola @Fede').		self assert: (canal leerMensajes size) equals: 2.	self assert: (usuario leerMensajes size) equals: 1.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:07'!test04SePublicaUnMensajeEnElCanal		| canal usuario mensaje |		usuario := Usuario nuevoConNombre: 'Fede'.	canal := Canal nuevoConNombre: 'canalDePrueba'.	mensaje := Mensaje nuevoConContenido: 'Hola mundo'.	canal agregarUsuario: usuario.		canal publicarMensaje: mensaje.		self assert: (canal leerMensajes includes: mensaje).	self assert: (canal leerMensajes size) equals: 1.	self assert: (usuario leerMensajes includes: mensaje) not.	self assert: (usuario leerMensajes size) equals: 0.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:09'!test07SeSilenciaAUnUsuarioDelCanal		| usuario canal |		usuario := Usuario nuevoConNombre: 'Fede'.	usuario agregarPalabraClave: 'Hola'.	canal := Canal nuevoConNombre: 'canalDePrueba'.	canal agregarUsuario: usuario.	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola mundo').	canal silenciarUsuario: 'Fede'.	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola sol').	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola luna').	self assert: (usuario leerMensajes size) equals: 1.	self assert: (canal leerMensajes size) equals: 3.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:55'!test00SeCreaUnNuevoCanalVacio		| canal |		canal := Canal nuevoConNombre: 'canalDePrueba'.		self assert: (canal mostrarIntegrantes isEmpty).! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:04'!test03SePublicaUnMensajeEnElCanalVacio		| canal mensaje |		canal := Canal nuevoConNombre: 'canalDePrueba'.	mensaje := Mensaje nuevoConContenido: 'Hola mundo'.		canal publicarMensaje: mensaje.		self assert: (canal leerMensajes includes: mensaje).	self assert: (canal leerMensajes size) equals: 1.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:08'!test06SePublicaUnMensajeEnElCanalMencionandoPalabraClave		| canal usuario mensaje |		usuario := Usuario nuevoConNombre: 'Fede'.	usuario agregarPalabraClave: 'sol'.		canal := Canal nuevoConNombre: 'canalDePrueba'.	mensaje := Mensaje nuevoConContenido: 'Hola mundo, hola sol, hola luna'.	canal agregarUsuario: usuario.		canal publicarMensaje: mensaje.		self assert: (canal leerMensajes includes: mensaje).	self assert: (canal leerMensajes size) equals: 1.	self assert: (usuario leerMensajes includes: mensaje).	self assert: (usuario leerMensajes size) equals: 1.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:11'!test08SeReactivaAUnUsuarioDelCanal		| usuario canal |		usuario := Usuario nuevoConNombre: 'Fede'.	usuario agregarPalabraClave: 'Hola'.	canal := Canal nuevoConNombre: 'canalDePrueba'.	canal agregarUsuario: usuario.	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola mundo').	canal silenciarUsuario: 'Fede'.	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola sol').	canal reactivarUsuario: 'Fede'.	canal publicarMensaje: (Mensaje nuevoConContenido: 'Hola luna').	self assert: (usuario leerMensajes size) equals: 2.	self assert: (canal leerMensajes size) equals: 3.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:02'!test02SeIntentanAgreganDosUsuariosConIgualNombreAlCanal		| canal usuario1 usuario2 |		canal := Canal nuevoConNombre: 'canalDePrueba'.	usuario1 := Usuario nuevoConNombre: 'Fede'.	usuario2 := Usuario nuevoConNombre: 'Fede'.		canal agregarUsuario: usuario1.	self assert: (canal mostrarIntegrantes size) equals: 1.	canal agregarUsuario: usuario2.	self assert: (canal mostrarIntegrantes size) equals: 1.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:07'!test05SePublicaUnMensajeEnElCanalMencionandoAUnUsuario		| canal usuario mensaje |		usuario := Usuario nuevoConNombre: 'Fede'.	canal := Canal nuevoConNombre: 'canalDePrueba'.	mensaje := Mensaje nuevoConContenido: 'Hola @Fede'.	canal agregarUsuario: usuario.		canal publicarMensaje: mensaje.		self assert: (canal leerMensajes includes: mensaje).	self assert: (canal leerMensajes size) equals: 1.	self assert: (usuario leerMensajes includes: mensaje).	self assert: (usuario leerMensajes size) equals: 1.! !!CanalTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 03:10'!test01SeAgregaUnNuevoUsuarioAlCanal		| canal usuario |		canal := Canal nuevoConNombre: 'canalDePrueba'.	usuario := Usuario nuevoConNombre: 'Fede'.	canal agregarUsuario: usuario.		self assert: (canal mostrarIntegrantes size) equals: 1.! !TestCase subclass: #ConversacionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!ConversacionTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:43'!test01SeCreaNuevaConversacionSinMensajes		| usuarios conversacion |		usuarios := Dictionary new.	usuarios at: 'Fede' put: (Usuario nuevoConNombre: 'Fede').	usuarios at: 'Juan' put: (Usuario nuevoConNombre: 'Juan').	usuarios at: 'Carlos' put: (Usuario nuevoConNombre: 'Carlos').		conversacion := Conversacion nuevaEntreLosUsuarios: (usuarios copy).	self assert: conversacion leerMensajes isEmpty.! !!ConversacionTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:45'!test02SeEnviaUnMensajeALaConversacion		| usuarios conversacion |		usuarios := Dictionary new.	usuarios at: 'Fede' put: (Usuario nuevoConNombre: 'Fede').	usuarios at: 'Juan' put: (Usuario nuevoConNombre: 'Juan').	usuarios at: 'Carlos' put: (Usuario nuevoConNombre: 'Carlos').		conversacion := Conversacion nuevaEntreLosUsuarios: (usuarios copy).	conversacion publicarMensaje: (Mensaje nuevoConContenido: 'Hola a todos').		self assert: (conversacion leerMensajes size) equals: 1.		(conversacion mostrarIntegrantes) valuesDo: [ :usuario	|		self assert: (usuario leerMensajes size) equals: 1.	].! !!ConversacionTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:42'!test00SeCreaUnaNuevaConversacionEntreUsuarios		| usuarios conversacion |		usuarios := Dictionary new.	usuarios at: 'Fede' put: (Usuario nuevoConNombre: 'Fede').	usuarios at: 'Juan' put: (Usuario nuevoConNombre: 'Juan').	usuarios at: 'Carlos' put: (Usuario nuevoConNombre: 'Carlos').		conversacion := Conversacion nuevaEntreLosUsuarios: (usuarios copy).	self assert: conversacion mostrarIntegrantes equals: usuarios.! !TestCase subclass: #MensajeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!MensajeTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:16'!test02SeRevisaUnMensajeEnBuscaDeUnaPalabra		| mensaje |		mensaje := Mensaje nuevoConContenido: 'Hola mundo, hola sol, hola luna'.		self assert: (mensaje buscarTexto: 'sol').	self assert: (mensaje buscarTexto: 'queso') not.! !!MensajeTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:10'!test00SeCreaUnNuevoMensaje		| mensaje |		mensaje := Mensaje nuevoConContenido: 'Hola mundo'.		self assert: (mensaje mostrarContenido) equals: 'Hola mundo'.! !!MensajeTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:11'!test01SeResumeUnMensaje		| mensaje |		mensaje := Mensaje nuevoConContenido: 'Hola mundo'.		self assert: (mensaje resumirContenidoA: 2) equals: 'Ho...'.	self assert: (mensaje resumirContenidoA: 0) equals: 'Hola mundo'.	self assert: (mensaje resumirContenidoA: -10) equals: 'Hola mundo'.! !!MensajeTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:19'!test03SeRevisaUnMensajeEnBuscaDeVariasPalabras		| mensaje palabras |		palabras := OrderedCollection new.	palabras add: 'hoja'.	palabras add: 'trebol'.	palabras add: 'luna'.		mensaje := Mensaje nuevoConContenido: 'Hola mundo, hola sol, hola luna'.		self assert: (mensaje mencionaAlgunaPalabraDe: palabras).! !TestCase subclass: #UsuarioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!UsuarioTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:35'!test02SeAgreganPalabrasClaveAlUsuario	| usuario |		usuario := Usuario nuevoConNombre: 'Fede'.		self assert: (usuario darPalabrasClave size) equals: 0.		usuario agregarPalabraClave: 'mundo'.	usuario agregarPalabraClave: 'libreta'.		self assert: (usuario darPalabrasClave size) equals: 2.	self assert: (usuario darPalabrasClave includes: 'mundo').	self assert: (usuario darPalabrasClave includes: 'libreta').! !!UsuarioTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:37'!test01SeEnviaUnMensajeAlUsuario	| usuario |		usuario := Usuario nuevoConNombre: 'Fede'.		self assert: (usuario leerMensajes size) equals: 0.	usuario recibirMensaje: (Mensaje nuevoConContenido: 'Hola mundo').	usuario recibirMensaje: (Mensaje nuevoConContenido: 'Hola sol').		self assert: (usuario leerMensajes size) equals: 2.! !!UsuarioTest methodsFor: 'tests' stamp: 'FedericoPratto 9/18/2019 02:23'!test00SeCreaUnNuevoUsuarioConNombre	| usuario |		usuario := Usuario nuevoConNombre: 'Fede'.		self assert: (usuario darNombre) equals: 'Fede'.! !