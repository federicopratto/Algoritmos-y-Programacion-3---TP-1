Object subclass: #AlgoChat	instanceVariableNames: 'usuarios canales conversaciones'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!AlgoChat commentStamp: 'FedericoPratto 9/18/2019 01:14' prior: 0!AlgoChat.!!AlgoChat methodsFor: 'initialization' stamp: 'FedericoPratto 9/19/2019 22:46'!initialize	"POST: Instancia un nuevo chat valido."	usuarios := Dictionary new.	canales := Dictionary  new.	conversaciones := Dictionary new.! !!AlgoChat methodsFor: 'private' stamp: 'FedericoPratto 9/19/2019 23:38'!getMensajesDe: integranteDelChat ubicadoEn: unaUbicacion resumidosALongitud: cantidadDeCaracteres	"PRE: Cantidad de caracteres es mayor o igual a cero.	POST: Devuelve los mensajes de un elemento del chat (usuario, conversacion รณ canal)			resumidos, o no, a una cantidad de caracteres y separados por pipes."	| integrante mensajes |		integrante := unaUbicacion at: integranteDelChat.		mensajes := (integrante leerMensajes) collect: [ :mensaje | 						mensaje resumirContenidoA: cantidadDeCaracteres	].		^ mensajes joinUsing: ' | '.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:37'!enviarMensaje: mensaje aUsuario: nombreUsuario	"PRE: El usuario existe en el chat.	POST: Envia un mensaje a un usuario del chat"		usuarios at: nombreUsuario ifPresent: [ :usuario |			usuario recibirMensaje: (Mensaje nuevoConContenido: mensaje).	].! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:48'!reanudarPalabrasDeCanal: nombreCanal paraUsuario: nombreUsuario	"PRE: El usuario existe, el canal existe, el usuario pertenece al canal.	POST: Reanuda las notificaciones por palabra clave para un usuario."	(canales at: nombreCanal) reactivarUsuario: nombreUsuario.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:40'!getCantidadCanales	"POST: Devuelve la cantidad de canales creados en el Chat"		^canales size.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/14/2019 01:49'!publicarMensaje: nuevoMensaje enCanal: nombreCanal	"PRE: El canal existe.	POST: 	Publica un nuevo mensaje en el canal."	(canales at: nombreCanal) publicarMensaje: (Mensaje nuevoConContenido: nuevoMensaje).! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:48'!publicarMensaje: nuevoMensaje enConversacion: nombreConversacion	"PRE: La conversacion existe.	POST: Publica un mensaje en una conversacion."		(conversaciones at: nombreConversacion) publicarMensaje: (Mensaje nuevoConContenido: nuevoMensaje).! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:40'!getCantidadUsuarios		"POST: Devuelve la cantidad de usuarios creados en el chat."		^usuarios size.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:37'!crearConversacionConUsuarios: nombreUsuarios	"PRE: No existe una conversacion entre los usuarios ingresados, existen todos los usuarios ingresados,			el metodo recibe al menos el nombre de un usuario.	POST: Crea una conversacion entre un grupo de usuarios."		| integrantesConversacion |	integrantesConversacion := Dictionary new.		(nombreUsuarios splitOn: ',') do: [ :nombre |		integrantesConversacion at: nombre put: (usuarios at: nombre)	].		conversaciones at: nombreUsuarios ifAbsentPut: [ 		Conversacion nuevaEntreLosUsuarios: integrantesConversacion.	].! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:46'!mensajesDelCanal: nombreCanal	"PRE: El canal existe.	POST: Devuelve una lista de los mensajes del canal, separados por pipes. Ej: hola | mundo"		^ self mensajesDelCanal: nombreCanal resumidosALongitud: 0. ! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:45'!getNotificacionesDeUsuario: nombreUsuario	"PRE: El usuario existe.	POST: Devuelve una lista de los mensajes del usuario, separados por pipes. Ej: hola | mundo"	 	^ self getNotificacionesDeUsuario: nombreUsuario resumidasALongitud: 0.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/14/2019 00:21'!agregarCanalConNombre: nombreCanal	"PRE: No existe un canal con el mismo nombre.	POST: Agrega un canal al chat."		canales at: nombreCanal ifAbsentPut:[				Canal nuevoConNombre: nombreCanal.	].! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:37'!agregarUsuarioConNombre: nombreUsuario		"PRE: No existe un usuario con el mismo nombre en el chat.	POST: Agrega un usuario al chat." 		usuarios at: nombreUsuario ifAbsentPut: [ 			Usuario nuevoConNombre: nombreUsuario.	].! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:37'!agregarUsuario: nombreUsuario alCanal: nombreCanal	"PRE: El usuario existe, el canal existe, el usuario no pertenece al canal.	POST: Agrega un nuevo usuario a un canal."	| canal usuario |	canal := canales at: nombreCanal.	usuario := usuarios at: nombreUsuario.		canal agregarUsuario: usuario.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/15/2019 20:48'!agregarPalabraClave: palabraClave alUsuario: nombreUsuario	"PRE: El usuario existe.	POST: Agrega una palabra clave al usuario."	usuarios at: nombreUsuario ifPresent: [ : usuario |				usuario agregarPalabraClave: palabraClave.	].! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:38'!getNotificacionesDeUsuario: nombreUsuario resumidasALongitud: cantidadDeCaracteres	"PRE: El usuario existe y cantidad de caracteres es mayor o igual a cero.	POST: Devuelve una lista de los mensajes del usuario, separados por pipes, con una			longitud maxima de caracteres por mensaje. Ej.: hola | marc... | frit..."		^ self getMensajesDe: nombreUsuario ubicadoEn: usuarios resumidosALongitud: cantidadDeCaracteres.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/14/2019 01:52'!pausarPalabrasDeCanal: nombreCanal paraUsuario: nombreUsuario	"PRE: El usuario existe, el canal existe, el usuario pertenece al canal.	POST: 	Pausa las notificaciones por palabra clave para un usuario en el canal."	(canales at: nombreCanal) silenciarUsuario: nombreUsuario.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 22:45'!getMensajesDeConversacion: nombreConversacion	"PRE: La conversacion existe.	POST: Devuelve los mensajes publicados en la conversacion separados por pipes. Ej: hola | mundo"		^self getMensajesDe: nombreConversacion ubicadoEn: conversaciones resumidosALongitud: 0.! !!AlgoChat methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:38'!mensajesDelCanal: nombreCanal resumidosALongitud: cantidadDeCaracteres		"PRE: El canal existe dentro del chat y cantidad de caracteres es mayor o igual a cero.	POST: Devuelve una lista de los mensajes del canal, separados por pipes, con una			longitud maxima de caracteres por mensaje. Ej.: hola | marc... | frit..."	^ self getMensajesDe: nombreCanal ubicadoEn: canales resumidosALongitud: cantidadDeCaracteres.! !Object subclass: #Canal	instanceVariableNames: 'nombre mensajes usuarios'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Canal commentStamp: 'FedericoPratto 9/18/2019 01:14' prior: 0!Canal.!!Canal methodsFor: 'testing' stamp: 'FedericoPratto 9/19/2019 23:29'!mostrarIntegrantes	"POST: Devuelve un listado de los usuarios del canal."		| listaDeUsuarios |		listaDeUsuarios := Dictionary new.	usuarios keysAndValuesDo: [ :nombreUsuario :entrada |		listaDeUsuarios at: nombreUsuario put: (entrada at: 1).	].	^listaDeUsuarios.! !!Canal methodsFor: 'private' stamp: 'FedericoPratto 9/19/2019 23:19'!enviarMensaje: unMensaje aUsuario: unUsuario	"PRE: El usuario existe en el canal.	POST: Envia un mensaje a un usuario si es que este, o alguna de sus palabras clave, son 			mencionadas en el contenido mismo."	| usuario estado listaDePalabras |		usuario := unUsuario at: 1.	estado := unUsuario at: 2.	listaDePalabras := OrderedCollection new.		(estado = 'activo') ifTrue:[		listaDePalabras := usuario darPalabrasClave.	].	listaDePalabras add: ('@', usuario darNombre).		(unMensaje mencionaAlgunaPalabraDe: listaDePalabras) ifTrue:[		usuario recibirMensaje: unMensaje.	].! !!Canal methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/17/2019 15:05'!asignarNombre: nombreCanal	"POST: Le asigna un nuevo nombre al canal."		nombre := nombreCanal.! !!Canal methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/19/2019 23:20'!initialize	"POST: Instancia un nuevo canal valido."	nombre := ''.	usuarios := Dictionary new.	mensajes := OrderedCollection new.! !!Canal methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:35'!publicarMensaje: nuevoMensaje	"POST: Publica un nuevo mensaje en el canal y lo envia a otro metodo			 para que lo reenvie a los usuarios del chat si es necesario."	mensajes add: nuevoMensaje.			usuarios valuesDo: [ : usuario |				self enviarMensaje: nuevoMensaje aUsuario: usuario.	].! !!Canal methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:20'!leerMensajes	"POST: Devuelve los mensajes del canal."	^mensajes.! !!Canal methodsFor: 'usuarios' stamp: 'FedericoPratto 9/19/2019 23:36'!reactivarUsuario: nombreUsuario	"PRE: El usuario pertenece al canal.	POST: Se reactivan las notificaciones por palabra clave para el usuario."	| usuario |		usuario := usuarios at: nombreUsuario.	usuario at: 2 put: 'activo'.! !!Canal methodsFor: 'usuarios' stamp: 'FedericoPratto 9/19/2019 23:14'!agregarUsuario: unUsuario 	"PRE: No existe un usuario con el mismo nombre en el canal.	POST: Agrega un nuevo usuario al canal."		| usuario |		usuario := Array new: 2.	usuario at: 1 put: unUsuario.	usuario at: 2 put: 'activo'.		usuarios at: (unUsuario darNombre) ifAbsentPut: usuario.! !!Canal methodsFor: 'usuarios' stamp: 'FedericoPratto 9/19/2019 23:36'!silenciarUsuario: nombreUsuario	"PRE: El usuario pertenece al canal.	POST: Se silencian las notificaciones por palabra clave para unUsuario."		| usuario |		usuario := usuarios at: nombreUsuario.	usuario at: 2 put: 'silenciado'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Canal class	instanceVariableNames: ''!!Canal class methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/13/2019 23:36'!nuevoConNombre: nombreCanal		"POST: Crea un nuevo canal con nombre 'nombreCanal' y lo devuelve."		| canal |	canal := Canal new.	canal asignarNombre: nombreCanal.	^canal.! !Object subclass: #Conversacion	instanceVariableNames: 'integrantes mensajes'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Conversacion commentStamp: 'FedericoPratto 9/18/2019 01:14' prior: 0!Conversacion.!!Conversacion methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/19/2019 23:42'!initialize		"POST: Instancia una nueva conversacion valida."		mensajes := OrderedCollection new.! !!Conversacion methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/13/2019 22:08'!asignarIntegrantes: usuariosIntegrantes	"POST: Asigna un grupo de integrantes a una conversacion."	integrantes := usuariosIntegrantes.! !!Conversacion methodsFor: 'testing' stamp: 'FedericoPratto 9/19/2019 23:43'!mostrarIntegrantes	"POST: Devuelve un listado de los usuarios de la conversacion"	^(integrantes copy).! !!Conversacion methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:44'!publicarMensaje: nuevoMensaje	"POST: Publica un nuevo mensaje en la conversacion y lo reenvia a todos los usuarios integrantes."	mensajes add: nuevoMensaje.		integrantes valuesDo: [ :usuario | 		usuario recibirMensaje: nuevoMensaje.	].! !!Conversacion methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:43'!leerMensajes	"POST: Devuelve los mensajes de la conversacion."	^mensajes.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Conversacion class	instanceVariableNames: ''!!Conversacion class methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:41'!nuevaEntreLosUsuarios: usuariosIntegrantes		"POST:	 Crea una conversacion vacia entre los usuarios ingresados."			| conversacion |		conversacion := Conversacion new.	conversacion asignarIntegrantes: usuariosIntegrantes. 		^conversacion.! !Object subclass: #Mensaje	instanceVariableNames: 'contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Mensaje commentStamp: 'FedericoPratto 9/18/2019 01:14' prior: 0!Mensaje.!!Mensaje methodsFor: 'search and filtering' stamp: 'FedericoPratto 9/19/2019 23:51'!mencionaAlgunaPalabraDe: listaDePalabras	"POST: Revisa si el mensaje menciona en su contenido alguna palabra de un listado			 que recibe."		| resultados |		resultados := listaDePalabras collect: [ :palabra |		self buscarTexto: palabra.	].		^(resultados includes: true)! !!Mensaje methodsFor: 'private' stamp: 'FedericoPratto 9/19/2019 23:51'!buscarTexto: textoBuscado	"POST: Busca un texto dentro del contenido del mensaje y devuelve el resultado			 de dicha busqueda."	^(contenido findString: textoBuscado) > 0! !!Mensaje methodsFor: 'input/output' stamp: 'FedericoPratto 9/19/2019 23:52'!mostrarContenido	"POST: Devulve el contenido del mensaje."	^ self resumirContenidoA: 0.! !!Mensaje methodsFor: 'input/output' stamp: 'FedericoPratto 9/19/2019 23:53'!resumirContenidoA: cantidadDeCaracteres	"PRE: cantidadDeCaracteres es mayor o igual a cero.	POST: Devuelve el contenido del mensaje resumido."		| resumen |	resumen := contenido.	((contenido size > cantidadDeCaracteres) and: (cantidadDeCaracteres > 0)) ifTrue:[		resumen := contenido copyFrom: 1 to: cantidadDeCaracteres.		resumen := resumen , '...'.	].	^ resumen.! !!Mensaje methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/19/2019 23:48'!escribirContenido: textoMensaje	"POST: Le asigna al mensaje su contenido"	contenido := textoMensaje.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mensaje class	instanceVariableNames: ''!!Mensaje class methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:45'!nuevoConContenido: contenido	"POST: Crea un nuevo mensaje con el contenido recibido."	| mensaje |		mensaje := Mensaje new.	mensaje escribirContenido: contenido.		^mensaje.! !Object subclass: #Usuario	instanceVariableNames: 'nombre palabrasClave mensajes'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Usuario commentStamp: 'FedericoPratto 9/18/2019 01:14' prior: 0!Usuario.!!Usuario methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/19/2019 23:54'!asignarNombre: unNombre	"POST: Le asigna un nombre al usuario."		nombre := unNombre.! !!Usuario methodsFor: 'initialization - private' stamp: 'FedericoPratto 9/19/2019 23:56'!initialize	"POST: Instancia un nuevo usuario valido."		nombre := ''.	mensajes := OrderedCollection new.	palabrasClave := OrderedCollection new.! !!Usuario methodsFor: 'input/output' stamp: 'FedericoPratto 9/12/2019 02:27'!darNombre	"POST: Retorna el nombre del usuario."	^nombre.! !!Usuario methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:57'!leerMensajes		"POST: Devuelve los mensajes del usuario."	^ mensajes.! !!Usuario methodsFor: 'mensajes' stamp: 'FedericoPratto 9/14/2019 03:13'!recibirMensaje: unMensaje	"POST: El usuario recibe un nuevo mensaje y lo almacena."		mensajes add: unMensaje.! !!Usuario methodsFor: 'mensajes' stamp: 'FedericoPratto 9/12/2019 02:06'!agregarPalabraClave: nuevaPalabra	"POST: Agrega una nueva palabra clave al usuario."	(palabrasClave includes: nuevaPalabra) ifFalse:[		palabrasClave add: nuevaPalabra.	].! !!Usuario methodsFor: 'mensajes' stamp: 'FedericoPratto 9/19/2019 23:55'!darPalabrasClave	"POST: Devuelve un listado de las palabras clave del usuario."	^(palabrasClave copy).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'FedericoPratto 9/19/2019 23:45'!nuevoConNombre: nombreUsuario	"POST: Crea un usuario con el nombre ingresado."	| usuario |		usuario := Usuario new.	usuario asignarNombre: nombreUsuario.		^usuario.! !